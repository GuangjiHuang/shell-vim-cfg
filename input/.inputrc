# /etc/inputrc - global inputrc for libreadline
# See readline(3readline) and `info rluserman' for more information.

# Be 8 bit clean.
set input-meta on
set output-meta on

# To allow the use of 8bit-characters like the german umlauts, uncomment
# the line below. However this makes the meta key not work as a meta key,
# which is annoying to those which don't need to type in 8-bit characters.

# set convert-meta off

# try to enable the application keypad when it is called.  Some systems
# need this to enable the arrow keys.
# set enable-keypad on

# see /usr/share/doc/bash/inputrc.arrows for other codes of arrow keys

# do not bell on tab-completion
# set bell-style none
# set bell-style visible

# some defaults / modifications for the emacs mode
$if mode=emacs

# allow the use of the Home/End keys
"\e[1~": beginning-of-line
"\e[4~": end-of-line

# allow the use of the Delete/Insert keys
"\e[3~": delete-char
"\e[2~": quoted-insert

# mappings for "page up" and "page down" to step to the beginning/end
# of the history
# "\e[5~": beginning-of-history
# "\e[6~": end-of-history

# alternate mappings for "page up" and "page down" to search the history
# "\e[5~": history-search-backward
# "\e[6~": history-search-forward

# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word

$if term=rxvt
"\e[7~": beginning-of-line
"\e[8~": end-of-line
"\eOc": forward-word
"\eOd": backward-word
$endif

# for non RH/Debian xterm, can't hurt for RH/Debian xterm
# "\eOH": beginning-of-line
# "\eOF": end-of-line

# for freebsd console
# "\e[H": beginning-of-line
# "\e[F": end-of-line

$endif
##########################   your custom configuration ###################
set editing-mode vi
set show-mode-in-prompt on
#set vi-ins-mode-string "(ins)\1\e[5 q\2"
#set vi-cmd-mode-string "(cmd)\1\e[1 q\2"
#set vi-ins-mode-string "\1\e[01;40m\2\1\e[01;35m\2\1\e[5 q\e]12;orange\a\2[Y]\1\e[0m\2"  # cursor: shinning pile-line, orange
#set vi-cmd-mode-string "\1\e[01;40m\2\1\e[01;31m\2\1\e[2 q\e]12;red\a\2[H]\1\e[0m\2" # cursor: still block, red
#set vi-ins-mode-string "\1\e[1;5;9m\2\1\e[35;40m\2[Y]\1\e[5 q\e]12;orange\a\2\1\e[0m\2"  
set vi-ins-mode-string "\1\e[1;1;35;40m\2[YH]\2\e[2 q\e]12;orange\007\2\1\e[0m\2"
set vi-cmd-mode-string "\1\e[1;1;31;40m\2[GJ]\1\e[1 q\e]12;red\007\2\1\e[0m\2" 
#set vi-ins-mode-string \1\e[34;1m\2(ins)\1\e[5 q\2
#set vi-cmd-mode-string \1\e[33;1m\2(cmd)\1\e[2 q\2
# the explanation:
# 1) \1...\2, all the content are put in the ...
# 2) about the color, the form is that: \e[F;Bm
# 3) if not use the escape \, that is the string, for example the (ins) and the (cmd)
# 4) about the cursor's shape: \e[shape_number q;  the shape_nunber: learning...
# 1: shinning block; 2:block; 3:shining underscore; 4:underscore; 5:shinning pile line; 6: pile line
#set vi-ins-mode-string \1\e[33;1m\2(->)\1\e[5 q\e]12;orange\a\2
#set vi-cmd-mode-string \1\e[31;1m\2(-^)\1\e[1 q\e]12;red\a\2
$if mode=vi
	set keymap vi-insert
"\C-l":clear-screen
"\C-a":beginning-of-line
"\C-e":end-of-line
# jj map to the esc. note that the \e means the esc
#"jj":"\e"
"jj":vi-movement-mode
# ciw map to the bcw, diw map to the bdw, yiw map to the byw
	set keymap vi-command
"ciw":"bcw"
"diw":"bdw"
"yiw":"byw"
$endif
